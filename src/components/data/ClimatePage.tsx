import React, { useState, useEffect } from "react";
import { useTranslations } from "../../hooks/useTranslations";
import Base from "../layout/Base";
import { LoadingSpinner } from "../ui/LoadingSpinner";
import { Alert } from "../ui/Alert";
import {
  CloudIcon,
  ThermometerIcon,
  BeakerIcon,
  EyeDropperIcon,
  WindIcon,
  SunIcon,
  CalendarIcon,
  MapIcon,
  ChartBarIcon,
  ArrowDownTrayIcon,
  FunnelIcon,
} from "@heroicons/react/24/outline";\n\ninterface ClimateData {\n  parameter: string;\n  currentValue: number;\n  unit: string;\n  trend: 'up' | 'down' | 'stable';\n  change: number;\n  lastUpdate: string;\n  min24h: number;\n  max24h: number;\n  icon: React.ComponentType<{ className?: string }>;\n}\n\nexport const ClimatePage: React.FC = () => {\n  const t = useTranslations();\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedRegion, setSelectedRegion] = useState('all');\n  const [selectedPeriod, setSelectedPeriod] = useState('24h');\n  const [viewMode, setViewMode] = useState<'grid' | 'chart'>('grid');\n\n  // Données climatiques d'exemple\n  const [climateData, setClimateData] = useState<ClimateData[]>([\n    {\n      parameter: 'Température',\n      currentValue: 32.5,\n      unit: '°C',\n      trend: 'up',\n      change: 2.3,\n      lastUpdate: '2024-01-15T10:30:00Z',\n      min24h: 24.2,\n      max24h: 35.1,\n      icon: ThermometerIcon\n    },\n    {\n      parameter: 'Humidité',\n      currentValue: 65,\n      unit: '%',\n      trend: 'down',\n      change: -5.2,\n      lastUpdate: '2024-01-15T10:30:00Z',\n      min24h: 58,\n      max24h: 78,\n      icon: EyeDropperIcon\n    },\n    {\n      parameter: 'Pression',\n      currentValue: 1013.2,\n      unit: 'hPa',\n      trend: 'stable',\n      change: 0.1,\n      lastUpdate: '2024-01-15T10:30:00Z',\n      min24h: 1011.8,\n      max24h: 1015.4,\n      icon: BeakerIcon\n    },\n    {\n      parameter: 'Précipitations',\n      currentValue: 0,\n      unit: 'mm',\n      trend: 'stable',\n      change: 0,\n      lastUpdate: '2024-01-15T10:30:00Z',\n      min24h: 0,\n      max24h: 2.5,\n      icon: CloudIcon\n    },\n    {\n      parameter: 'Vitesse du vent',\n      currentValue: 15.2,\n      unit: 'km/h',\n      trend: 'up',\n      change: 3.8,\n      lastUpdate: '2024-01-15T10:30:00Z',\n      min24h: 8.5,\n      max24h: 22.1,\n      icon: WindIcon\n    },\n    {\n      parameter: 'Index UV',\n      currentValue: 8.5,\n      unit: '',\n      trend: 'up',\n      change: 1.2,\n      lastUpdate: '2024-01-15T10:30:00Z',\n      min24h: 0,\n      max24h: 11.2,\n      icon: SunIcon\n    }\n  ]);\n\n  const regions = [\n    { id: 'all', name: 'Toutes les régions' },\n    { id: 'centre', name: 'Centre' },\n    { id: 'nord', name: 'Nord' },\n    { id: 'sud-ouest', name: 'Sud-Ouest' },\n    { id: 'est', name: 'Est' },\n    { id: 'sahel', name: 'Sahel' }\n  ];\n\n  const periods = [\n    { id: '1h', name: 'Dernière heure' },\n    { id: '24h', name: '24 dernières heures' },\n    { id: '7d', name: '7 derniers jours' },\n    { id: '30d', name: '30 derniers jours' }\n  ];\n\n  useEffect(() => {\n    // Simulation du chargement des données\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 1500);\n\n    return () => clearTimeout(timer);\n  }, [selectedRegion, selectedPeriod]);\n\n  const handleRegionChange = (region: string) => {\n    setSelectedRegion(region);\n    setIsLoading(true);\n  };\n\n  const handlePeriodChange = (period: string) => {\n    setSelectedPeriod(period);\n    setIsLoading(true);\n  };\n\n  const exportData = () => {\n    console.log('Exporting climate data...');\n    // Logique d'export des données climatiques\n  };\n\n  const getTrendIcon = (trend: 'up' | 'down' | 'stable') => {\n    if (trend === 'up') {\n      return <span className=\"text-red-500\">↗</span>;\n    } else if (trend === 'down') {\n      return <span className=\"text-blue-500\">↘</span>;\n    }\n    return <span className=\"text-gray-500\">→</span>;\n  };\n\n  const getTrendColor = (trend: 'up' | 'down' | 'stable') => {\n    switch (trend) {\n      case 'up': return 'text-red-600 dark:text-red-400';\n      case 'down': return 'text-blue-600 dark:text-blue-400';\n      default: return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    return new Date(timestamp).toLocaleString('fr-FR');\n  };\n\n  if (isLoading) {\n    return (\n      <Base>\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-center space-y-4\">\n            <LoadingSpinner size=\"lg\" />\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Chargement des données climatiques...\n            </p>\n          </div>\n        </div>\n      </Base>\n    );\n  }\n\n  return (\n    <Base>\n      <div className=\"space-y-6\">\n        {/* En-tête */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white flex items-center\">\n              <CloudIcon className=\"w-8 h-8 mr-3 text-blue-600\" />\n              Données Climatiques\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n              Monitoring des conditions météorologiques en temps réel\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => setViewMode('grid')}\n                className={`p-2 rounded-lg transition-colors ${\n                  viewMode === 'grid'\n                    ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300'\n                    : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'\n                }`}\n              >\n                <FunnelIcon className=\"w-5 h-5\" />\n              </button>\n              <button\n                onClick={() => setViewMode('chart')}\n                className={`p-2 rounded-lg transition-colors ${\n                  viewMode === 'chart'\n                    ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300'\n                    : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'\n                }`}\n              >\n                <ChartBarIcon className=\"w-5 h-5\" />\n              </button>\n            </div>\n            <button\n              onClick={exportData}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700 flex items-center space-x-2\"\n            >\n              <ArrowDownTrayIcon className=\"w-4 h-4\" />\n              <span>Exporter</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Filtres */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n          <div className=\"flex flex-wrap items-center justify-between gap-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <MapIcon className=\"w-5 h-5 text-gray-500\" />\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Région:</span>\n                <select\n                  value={selectedRegion}\n                  onChange={(e) => handleRegionChange(e.target.value)}\n                  className=\"text-sm border border-gray-300 dark:border-gray-600 rounded-md px-3 py-1 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500\"\n                >\n                  {regions.map((region) => (\n                    <option key={region.id} value={region.id}>\n                      {region.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <CalendarIcon className=\"w-5 h-5 text-gray-500\" />\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Période:</span>\n                <select\n                  value={selectedPeriod}\n                  onChange={(e) => handlePeriodChange(e.target.value)}\n                  className=\"text-sm border border-gray-300 dark:border-gray-600 rounded-md px-3 py-1 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500\"\n                >\n                  {periods.map((period) => (\n                    <option key={period.id} value={period.id}>\n                      {period.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Dernière mise à jour: {formatTimestamp(climateData[0]?.lastUpdate)}\n            </div>\n          </div>\n        </div>\n\n        {/* Vue grille */}\n        {viewMode === 'grid' && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {climateData.map((data, index) => (\n              <div key={index} className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"bg-blue-50 dark:bg-blue-900/20 p-2 rounded-lg\">\n                      <data.icon className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                        {data.parameter}\n                      </h3>\n                      <div className=\"flex items-center space-x-1 mt-1\">\n                        <span className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                          {data.currentValue}\n                        </span>\n                        <span className=\"text-lg text-gray-500 dark:text-gray-400\">\n                          {data.unit}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className={`flex items-center space-x-1 ${getTrendColor(data.trend)}`}>\n                      {getTrendIcon(data.trend)}\n                      <span className=\"text-sm font-medium\">\n                        {data.change > 0 ? '+' : ''}{data.change}{data.unit === '%' ? 'pp' : data.unit}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Min (24h):</span>\n                    <span className=\"font-medium text-gray-900 dark:text-white\">\n                      {data.min24h} {data.unit}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Max (24h):</span>\n                    <span className=\"font-medium text-gray-900 dark:text-white\">\n                      {data.max24h} {data.unit}\n                    </span>\n                  </div>\n                  \n                  {/* Barre de progression pour visualiser la valeur actuelle */}\n                  <div className=\"mt-3\">\n                    <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mb-1\">\n                      <span>{data.min24h}</span>\n                      <span>{data.max24h}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                      <div\n                        className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                        style={{\n                          width: `${((data.currentValue - data.min24h) / (data.max24h - data.min24h)) * 100}%`\n                        }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Vue graphique */}\n        {viewMode === 'chart' && (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                Évolution Temporelle - {selectedPeriod}\n              </h3>\n              <div className=\"h-80 flex items-center justify-center text-gray-500 dark:text-gray-400 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg\">\n                <div className=\"text-center\">\n                  <ChartBarIcon className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                  <p className=\"text-lg\">Graphique temporel interactif</p>\n                  <p className=\"text-sm mt-2\">Région: {regions.find(r => r.id === selectedRegion)?.name}</p>\n                  <p className=\"text-sm\">Période: {periods.find(p => p.id === selectedPeriod)?.name}</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                  Température vs Humidité\n                </h3>\n                <div className=\"h-64 flex items-center justify-center text-gray-500 dark:text-gray-400 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg\">\n                  <div className=\"text-center\">\n                    <ThermometerIcon className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                    <p>Graphique de corrélation</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                  Conditions Actuelles\n                </h3>\n                <div className=\"h-64 flex items-center justify-center text-gray-500 dark:text-gray-400 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg\">\n                  <div className=\"text-center\">\n                    <CloudIcon className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                    <p>Radar météorologique</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Résumé et alertes */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Alert>\n            <div className=\"flex items-start space-x-3\">\n              <ThermometerIcon className=\"w-5 h-5 text-orange-600 mt-0.5\" />\n              <div>\n                <h4 className=\"font-medium text-orange-900 dark:text-orange-200\">\n                  Conditions Météorologiques\n                </h4>\n                <p className=\"text-orange-700 dark:text-orange-300 text-sm mt-1\">\n                  Température élevée détectée ({climateData[0]?.currentValue}°C). \n                  Restez hydraté et évitez l'exposition prolongée au soleil.\n                </p>\n              </div>\n            </div>\n          </Alert>\n\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center\">\n              <WindIcon className=\"w-5 h-5 mr-2\" />\n              Conditions de Vent\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Vitesse:</span>\n                <span className=\"font-medium text-gray-900 dark:text-white\">\n                  {climateData.find(d => d.parameter === 'Vitesse du vent')?.currentValue} km/h\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Direction:</span>\n                <span className=\"font-medium text-gray-900 dark:text-white\">Sud-Ouest</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Rafales:</span>\n                <span className=\"font-medium text-gray-900 dark:text-white\">25.3 km/h</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Base>\n  );\n};